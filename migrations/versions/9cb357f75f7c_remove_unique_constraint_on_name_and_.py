"""remove unique constraint on name and type-->grocery_type

Revision ID: 9cb357f75f7c
Revises: a9cff719dac8
Create Date: 2024-08-16 16:46:50.211604

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '9cb357f75f7c'
down_revision = 'a9cff719dac8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('grocery_name', schema=None) as batch_op:
        # Rename the 'type' column to 'grocery_type'
        batch_op.alter_column('type', new_column_name='grocery_type', existing_type=sa.String(length=80),
                              nullable=False)
        # Drop unique constraints on 'name' and 'grocery_type' if they exist
        batch_op.drop_index('name')  # Make sure the index name is correct
        batch_op.drop_index('type')  # This is now 'grocery_type', check the existing index name
    # ### end Alembic commands ###

    # with op.batch_alter_table('user', schema=None) as batch_op:
    #   batch_op.create_unique_constraint(None, ['email'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # with op.batch_alter_table('user', schema=None) as batch_op:
    #   batch_op.drop_constraint(None, type_='unique')

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('grocery_name', schema=None) as batch_op:
        # Revert 'grocery_type' back to 'type'
        batch_op.alter_column('grocery_type', new_column_name='type', existing_type=mysql.VARCHAR(length=80),
                              nullable=False)

        # Recreate unique constraints on 'name' and 'type'
        batch_op.create_index('name', ['name'], unique=True)
        batch_op.create_index('type', ['type'], unique=True)
    # ### end Alembic commands ###
